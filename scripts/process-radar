#!/usr/bin/env python
# Copyright (c) 2020 MesoSim Developers.
# Distributed under the terms of the Apache 2.0 License.
# SPDX-License-Identifier: Apache-2.0
"""
Radar Move and Log
------------------

This script stages the radar files for use in the simulation.

To prepare the radar data for processing via the script, complete the following
steps first:

1. Download the radar data from
    [NCDC](https://www.ncdc.noaa.gov/has/HAS.DsSelect) after placing an order
2. You will have a large number of `.tar` files. Untar them all with the
    command
    ```
    for f in NWS_NEXRAD_NXL2DP_*.tar; do tar -xvf $f; done
    ```
    (this should take under a minute on chinook)
3. From that, you'll now have (an even larger) number of `.gz` files. Unzip
    them all with the command
    ```
    for f in K*.gz; do gzip -d $f; done
    ```
    (this should take under an hour on chinook)
4. Now you're ready to use this script! Make sure you have your current raw
    data directory, staging directory, and start and end times ready, and
    update the constants values below.

What this script does:

- Finds all *_V06 files in --raw-dir
- Assembles a list of dicts with scan info (site, datetime, file name) while
    filtering to just include scans during simulation timeframe
- Updates filenames of simulation scans and moves them to staging directory
- Creates a database of the basic scan info for use by the
    simulation-radar script during the simulation

"""

# Imports
import argparse
import glob
import os
from datetime import datetime
from sqlite3 import dbapi2 as sql

import pytz
from dateutil import parser as dateparser
from mesosim.core.timing import std_fmt

# Constants


# Set up script configuration
parser = argparse.ArgumentParser(
    description="Move and log downloaded and extracted radar files.", usage=argparse.SUPPRESS
)

parser.add_argument(
    "-s",
    "--start",
    help="<Required> Archival start time",
    required=True,
    metavar="2010-06-01T00:00Z",
)
parser.add_argument(
    "-e",
    "--end",
    help="<Required> Archival end time",
    required=True,
    metavar="2010-06-01T06:00Z",
)
parser.add_argument(
    "-R", "--raw-dir", help="<Required> Raw file directory", required=True, metavar="~/raw/"
)
parser.add_argument(
    "-S",
    "--staging-dir",
    help="<Required> Staging directory",
    required=True,
    metavar="~/staging/",
)
parser.add_argument(
    "-o", "--output", help="Output filename", default="radar.db", metavar="radar.db"
)

try:
    args = parser.parse_args()
except SystemExit:
    parser.print_help()
    raise

# Archive Times
arc_start_time = dateparser.parse(args.start)
arc_end_time = dateparser.parse(args.end)

# Critical Directories
radar_raw_dir = args.raw_dir
radar_staging_dir = args.staging_dir

# Processing

# Get the files
print("Getting files...")
glob_list = glob.glob(radar_raw_dir + "*_V06")

# Assemble the list of scans we want with nice dictionaries
scan_list = []
for i in range(len(glob_list)):
    filename_full = glob_list[i]
    filename_part = filename_full.split("/")[-1]

    site = filename_part[0:4]
    year = int(filename_part[4:8])
    month = int(filename_part[8:10])
    day = int(filename_part[10:12])
    hour = int(filename_part[13:15])
    minute = int(filename_part[15:17])
    second = int(filename_part[17:19])

    scan_datetime = datetime(year, month, day, hour, minute, second, tzinfo=pytz.UTC)

    if arc_start_time <= scan_datetime <= arc_end_time:
        scan_list.append(
            {
                "file": filename_full,
                "file_part": filename_part,
                "site": site,
                "datetime": datetime(year, month, day, hour, minute, second, tzinfo=pytz.UTC),
            }
        )

# Move the files
for scan in scan_list:
    print("Moving {} {}".format(scan["site"], scan["datetime"].strftime(std_fmt)))
    new_file = radar_staging_dir + scan["file_part"][:-4]
    os.rename(scan["file"], new_file)
    scan["file"] = new_file

# Create the scan database
print("Exporting to DB...")
rad_con = sql.connect(args.output)
rad_cur = rad_con.cursor()
rad_cur.execute("CREATE TABLE scans (time datetime, site char, file char, munged tinyint)")
rad_con.commit()

# Insert all the records
for scan in scan_list:
    rad_cur.execute(
        "INSERT INTO scans (time, site, file) VALUES (?,?,?)",
        [scan["datetime"].strftime(std_fmt), scan["site"], scan["file"]],
    )

rad_con.commit()

print("Done!")
