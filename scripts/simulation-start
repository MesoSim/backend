#!/usr/bin/env python
# Copyright (c) 2020 MesoSim Developers.
# Distributed under the terms of the Apache 2.0 License.
# SPDX-License-Identifier: Apache-2.0
"""
Simulation Control - Start
--------------------------

Fields to set in control database:

arc_start_time
cur_start_time
speed_factor
simulation_running

How to do it:

get the archive start time and speed factor by prompt
verify the info
save the control database info
prompt to start simulation-radar and simulation-warning, and exit
"""

# Imports
import argparse
from datetime import datetime
from sqlite3 import dbapi2 as sql

import pytz
from dateutil import parser as dateparser
from mesosim.core.config import Config
from mesosim.core.timing import std_fmt

# Set up script configuration
parser = argparse.ArgumentParser(description="Reset the simulation.", usage=argparse.SUPPRESS)

parser.add_argument(
    "-r", "--radar-db", help="Radar database file", default="radar.db", metavar="radar.db"
)
parser.add_argument(
    "-c",
    "--config-db",
    help="Config/control database file",
    default="config.db",
    metavar="config.db",
)

try:
    args = parser.parse_args()
except SystemExit:
    parser.print_help()
    raise

# Greetings!
print("\nISU AMS Chase Simulation\n------------------------\n")

# Get the user input
arc_start_time = dateparser.parse(input("When does the archived case start?\n\t(use UTC) : "))
cur_start_time = input(
    "When does the current simulation of the case start?" + "\n\t(enter now for now) : "
)
if cur_start_time[0] in ["n", "N"]:
    cur_start_time = datetime.now(tz=pytz.UTC)
else:
    cur_start_time = dateparser.parse(cur_start_time)
speed_factor = int(input("What is the simulation speed-up factor? : "))

# Get radar scan interval for user confirmation prompt
rad_con = sql.connect(args.radar_db)
rad_cur = rad_con.cursor()
rad_cur.execute("SELECT time from scans ORDER BY time ASC")
scan_times = [scan[0] for scan in rad_cur.fetchall()]
arc_td = (dateparser.parse(scan_times[-1]) - dateparser.parse(scan_times[0])).seconds
cur_td = arc_td / speed_factor

arc_h = arc_td // 3600
arc_m = arc_td % 3600 // 60
arc_td_str = "{}h{}m".format(arc_h, arc_m)
cur_h = cur_td // 3600
cur_m = cur_td % 3600 // 60
cur_td_str = "{}h{}m".format(cur_h, cur_m)

# Confirmation
print("...To confirm...")
print("\tDo you wish to start the simulation of archived case")
print("\t{} (having {} of radar data)".format(arc_start_time.strftime(std_fmt), arc_td_str))
print("\tstarting at current time")
print("\t{} (having {} of radar data)?".format(cur_start_time.strftime(std_fmt), cur_td_str))
print()

confirm = input("[Y]es/[N]o: ")

if confirm[0] in ["Y", "y"]:

    # Alter configuration
    config = Config(args.config_db)
    timings = {
        "arc_start_time": arc_start_time.strftime(std_fmt),
        "cur_start_time": cur_start_time.strftime(std_fmt),
        "speed_factor": speed_factor,
        "simulation_running": 1,
    }
    for setting, value in timings.items():
        config.cur.execute(
            "UPDATE config SET config_value = ? WHERE config_setting = ?", [value, setting]
        )

    print(
        """
Simulation timing started.
Nothing is actually happening yet...
To do that, run
    simulation-radar (radar scans) and
    simulation-warning (warning text).
To reset, run
    simulation-reset,
and to pause, hack on the master config database (don't try it)

Have fun!
"""
    )

else:
    print("Canceled...")
