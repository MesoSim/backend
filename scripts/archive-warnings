#!/usr/bin/env python
# Copyright (c) 2020 MesoSim Developers.
# Distributed under the terms of the Apache 2.0 License.
# SPDX-License-Identifier: Apache-2.0
"""
Archive Warnings
------------

This script archives Warnings for use in the simulation.

Data provided by the IEM's wonderful JSON APIs.

Once you run this script to get the warnings database, copy it over to
wherever you have your simulation scripts.

What this script does:

- Gets the Warnings from IEM
- Adds on GR's \x03 termination character
- Saves them into a database for use by the `simulation-warning` script
    during the simulation

"""

import argparse
import re
from sqlite3 import dbapi2 as sql

# Imports
import requests
from dateutil import parser as dateparser
from mesosim.core.timing import std_fmt

# Set up script configuration
parser = argparse.ArgumentParser(
    description="Archive case study warnings.", usage=argparse.SUPPRESS
)

parser.add_argument(
    "-S",
    "--sites",
    nargs="+",
    help="<Required> Radar sites",
    required=True,
    metavar="MAF LUB OUN",
)
parser.add_argument(
    "-s",
    "--start",
    help="<Required> Archival start time",
    required=True,
    metavar="2010-06-01T00:00Z",
)
parser.add_argument(
    "-e",
    "--end",
    help="<Required> Archival end time",
    required=True,
    metavar="2010-06-01T06:00Z",
)
parser.add_argument(
    "-o", "--output", help="Output filename", default="warnings.db", metavar="warnings.db"
)

try:
    args = parser.parse_args()
except SystemExit:
    parser.print_help()
    raise

# Constants

# Archive Times
arc_start_time = dateparser.parse(args.start)
arc_end_time = dateparser.parse(args.end)

# Sites
wfos = args.sites

# Processing

# Build the endpoint URL to access the IEM archive
warnings_endpoint = (
    "http://mesonet.agron.iastate.edu/json/"
    + "nwstext_search.py?sts={start}&ets={end}&"
    + "awipsid={hazard}{wfo}"
)

# Loop over all the warning products
warnings = []
for hazard in ["TOR", "SVR", "FFW"]:
    for wfo in wfos:
        print("Downloading {}{}...".format(hazard, wfo))
        r = requests.get(
            warnings_endpoint.format(
                start=arc_start_time.strftime("%Y-%m-%dT%H:%MZ"),
                end=arc_end_time.strftime("%Y-%m-%dT%H:%MZ"),
                hazard=hazard,
                wfo=wfo,
            )
        )
        warnings += [record["data"] for record in r.json()["results"]]

# And let's just add the record close character so we don't have to later
warnings = [warning + "\x03" for warning in warnings]

# Make the warning database
print("Creating local database...")

warn_con = sql.connect(args.output)
warn_cur = warn_con.cursor()
warn_cur.execute("CREATE TABLE warnings_raw (valid datetime, text char, processed tinyint)")
warn_con.commit()

# Save the data
print("Loading into local database...")

query = "INSERT INTO warnings_raw (valid, text) VALUES (?,?)"
for warning in warnings:

    # Find the valid time
    match = re.search(
        (
            r"(?P<timestamp>[0-9]{2}(0[1-9]|1[0-2])([0-2][1-9]|3[0-1])"
            + r"T(([0-1][0-9])|(2[0-3]))([0-5][0-9])Z)"
        ),
        warning,
    )
    valid = dateparser.parse(match.group("timestamp"), yearfirst=True).strftime(std_fmt)

    # Save the row
    warn_cur.execute(query, [valid, warning])

warn_con.commit()

print("Done!")
