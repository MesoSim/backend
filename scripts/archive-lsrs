#!/usr/bin/env python
# Copyright (c) 2020 MesoSim Developers.
# Distributed under the terms of the Apache 2.0 License.
# SPDX-License-Identifier: Apache-2.0
"""
Archive LSRs
------------

This script archives LSRs for use in the simulation.

Data provided by the IEM's wonderful JSON APIs.

Once you run this script to get all the lsr.db database, copy it over to where your placefile
endpoint is located.

What this script does:

- Gets the LSRs from IEM
- Saves them into a database for use by the placefile endpoint

"""

import argparse
from sqlite3 import dbapi2 as sql

# Imports
import requests
from dateutil import parser as dateparser
from mesosim.lsr import type_to_icon

# Set up script configuration
parser = argparse.ArgumentParser(
    description="Archive case study LSRs.", usage=argparse.SUPPRESS
)

parser.add_argument(
    "-S",
    "--sites",
    nargs="+",
    help="<Required> Radar sites",
    required=True,
    metavar="MAF LUB OUN",
)
parser.add_argument(
    "-s",
    "--start",
    help="<Required> Archival start time",
    required=True,
    metavar="2010-06-01T00:00Z",
)
parser.add_argument(
    "-e",
    "--end",
    help="<Required> Archival end time",
    required=True,
    metavar="2010-06-01T06:00Z",
)
parser.add_argument(
    "-o", "--output", help="Output filename", default="lsr.db", metavar="lsr.db"
)

try:
    args = parser.parse_args()
except SystemExit:
    parser.print_help()
    raise

# Constants

# Archive Times
arc_start_time = dateparser.parse(args.start)
arc_end_time = dateparser.parse(args.end)

# Sites
wfos = args.sites

# Processing

# Build the endpoint URL to access the IEM archive
endpoint_args = {
    "start": arc_start_time.strftime("%Y%m%d%H%M"),
    "end": arc_end_time.strftime("%Y%m%d%H%M"),
    "wfos": ",".join(wfos),
}
lsr_endpoint = (
    "http://mesonet.agron.iastate.edu/geojson/lsr.php"
    + "?sts={start}&ets={end}&wfos={wfos}".format(**endpoint_args)
)

# Actually get the data
print("Requesting data from IEM...")

lsr_request = requests.get(lsr_endpoint)
lsrs = lsr_request.json()["features"]

# Make the LSR database
print("Creating local database...")

lsr_con = sql.connect(args.output)
lsr_cur = lsr_con.cursor()
lsr_cur.execute(
    "CREATE TABLE lsrs_raw (city char, county char, lat decimal, "
    + "lon decimal,magnitude char, remark char, source char, st char, "
    + "type char, typetext char, valid datetime, wfo char)"
)
lsr_con.commit()

# Save the data
print("Loading into local database...")

query = (
    "INSERT INTO lsrs_raw (city, county, lat, lon, magnitude, remark, "
    + "source, st, type, typetext, valid, wfo) VALUES "
    + "(?,?,?,?,?,?,?,?,?,?,?,?)"
)
for lsr_row in lsrs:
    lsr = lsr_row["properties"]
    if type_to_icon(lsr["type"]):
        lsr_cur.execute(
            query,
            [
                lsr["city"],
                lsr["county"],
                lsr["lat"],
                lsr["lon"],
                lsr["magnitude"],
                lsr["remark"],
                lsr["source"],
                lsr["st"],
                lsr["type"],
                lsr["typetext"],
                lsr["valid"],
                lsr["wfo"],
            ],
        )
lsr_con.commit()

print("Done!")
